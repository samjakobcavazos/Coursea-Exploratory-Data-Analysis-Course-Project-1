x <- c(4,"a",TRUE)
str(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2,"a","b",TRUE)
x[[1]]
str(x[[1]])
str(x[[1,w]])
str(x[[1,2]])
str(x[[2]])
str(x[[1]])
rm(list=ls())
x<-1:4
y<-2:3
x+y
str(x+y)
x <- c(3,5,1,10,12,6)
x[x<6]
clear
x
x[x<6]
x[x<6] <- 0
x
x <- c(3,5,1,10,12,6)
x[x %in% 1:5]
x[x %in% 1:5] <- 0
x
trash <- read.csv('~/../../Downloads/hw1_data.csv',stringsAsFactors = FALSE)
clear
trash
colnames(trash)
head(trash,12)
nrow(trash)
tail(trash,2)
trash[47,]$Ozone
length(trash[is.na(trash$Ozone),])
summary(trash$Ozone)
mean(trash[!(is.na(trash$Ozone)),]$Ozone)
clear
mean(trash[trash$Ozone > 31 & trash$Temp> 90,]$Solar.R,na.rm = TRUE)
mean(trash[trash$Month==6,]$Temp)
clear
max(trash[trash$Month==5,]$Ozone)
max(trash[trash$Month==5,]$Ozone,na.rm = TRUE)
x <- 4L
str(x)
x <- c(4,"a",TRUE)
str(x)
x<-c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2,"a","b",TRUE)
x[[2]]
str(x[[2]])
str(1:4 + 2)
x <- c(3,5,1,10,12,6)
head(test,2)
head(trash,2)
tail(trash,2)
trash$Ozone[47]
summary(trash$Ozone)
mean(trash$Ozone,na.rm=TRUE)
options(na.rm = TRUE)
mean(trash$Ozone)
mean(trash[trash$Ozone>31 & trash$Temp > 90,]$Solar.R)
mean(trash[trash$Ozone>31 & trash$Temp > 90,]$Solar.R,na.rm=TRUE)
mean(trash[trash$Month == 6,]$Temp,na.rm=TRUE)
max(trash[trash$Month==5,]$Ozone,na.rm=TRUE)
install.packages('swirl')
library(swirl)
clear
library(dplyr)
library(swirl)
install.packages('swirl')
library(swirl)
install.packages('stringi')
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.pow(3)
cube <- make.power(3)
make.power(3)
ls(environment(cube))
get("n",environment(cube))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
makeVector(3)
makeVector(c(3))
set <- function(y) {
x <<- y
m <<- NULL
}
set(*)
set()
set3
set(3)
x
m
rm(list=ls())
x
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(z){inv <<- z}
getinverse <- function(){inv}
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(z){inv <<- z}
getinverse <- function(){inv}
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(z){inv <<- z}
getinverse <- function(){inv}
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix()
x <- rbind(c(1,-1/4),c(-1/4,1))
x
m = makeCacheMatrix(x)
m
m$getinverse()
View(m)
m$get()
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse) inverse <<- inverse
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# Description
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data.")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setinverse(inverse)
inverse
}
x <- rbind(c(1,-1/4),c(-1/4,1))
m = makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data.")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setinverse(inverse)
inverse
}
x <- rbind(c(-1,0),c(0,1))
x
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
x <- rbind(c(-1,0),c(0,2))
m <- makeCacheMatrix(x)
cacheSolve(m)
m$getinverse()
x <- rbind(c(-1,0),c(1,3))
x
m <- makeCacheMatrix(x)
cacheSolve(m)
solve(x)
solve(x) %% x
solve(x) %*% x
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(inverse) inverse <<- inverse
getinverse <- function() inverse
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
setwd("~/Coursea/Coursea-Exploratory-Data-Analysis-Course-Project-1")
df <- read.csv('exdata_data_household_power_consumption/household_power_consumption.txt',sep=';',stringsAsFactors = FALSE)
# Change df$date to date type
df$Date <- as.Date(df$Date,format = '%d/%m/%Y')
as.numeric("?")
str(df)
# Filter by date
df <- df[df$Date >= '2007-02-01' & df$Date <= '2007-02-02',]
# Change variable types
df[,3:9]
# Change variable types
df[,3:9] <- as.numeric(df[,3:9])
# Change variable types
for (i in 3:9){
df[,i] <- as.numeric(df[,i])
}
View(df)
hist(df$Global_active_power)
?hist
hist(df$Global_active_power,col='red')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency',title ='Global Active Power')
df <- read.csv('exdata_data_household_power_consumption/household_power_consumption.txt',sep=';',stringsAsFactors = FALSE)
# Change df$date to date type
df$Date <- as.Date(df$Date,format = '%d/%m/%Y')
# Filter by date
df <- df[df$Date >= '2007-02-01' & df$Date <= '2007-02-02',]
# Change variable types
for (i in 3:9){
df[,i] <- as.numeric(df[,i])
}
png(file = 'plot1.png')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency',title ='Global Active Power')
dev.off()
png(file = 'plot1.png')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency')
title('Global Active Power')
dev.off()
png(file = 'plot1.png')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency')
dev.off()
title(main = 'Global Active Power')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency')
?hist
png(file = 'plot1.png')
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency',main='Global Active Power')
dev.off()
?png
png(file = 'plot1.png',width = 480, height = 480)
hist(df$Global_active_power,col='red',xlab = 'Global Active Power (kilowatts)',ylab = 'Frequency',main='Global Active Power')
dev.off()
plot(df$Date)
plot(df$Date,df$Global_active_power)
line(df$Date,df$Global_active_power)
df$Datetime <- strptime(df$Date,df$Time,sep = "  ","%d/%m/%Y %H:%M:%S")
df$Datetime <- strptime(df$Date,df$Time,sep = " ","%d/%m/%Y %H:%M:%S")
df$Datetime <- strptime(paste0(df$Date,df$Time,sep = " "),"%d/%m/%Y %H:%M:%S")
df$Datetime[1]
df$Datetime <- strptime(paste0(df$Date,df$Time,sep = "  "),"%d/%m/%Y %H:%M:%S")
df$Datetime
df$Datetime <- strptime(paste0(df$Date,df$Time,sep = "  "),"%d/%m/%Y  %H:%M:%S")
df$Datetime
df$Datetime <- strptime(paste0(df$Date,df$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
df$Datetime
df$Datetime <- strptime(paste0(df$Date,df$Time, sep=" "), "%Y-%m-%d %H:%M:%S")
df$Datetime
plot(df$Datetime,df$Global_active_power,type = 'l')
plot(df$Datetime,df$Global_active_power,type = 'l', xlab="", ylab="Global Active Power (kilowatts)"))
plot(df$Datetime,df$Global_active_power,type = 'l', xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
png('plot2.png',width = 480, height = 480)
plot(df$Datetime,df$Global_active_power,type = 'l', xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
png('plot2.png',width = 480, height = 480)
png('plot2.png',width = 480, height = 480)
png('plot2.png',width = 480, height = 480)
png('plot2.png',width = 480, height = 480)
dev.off()
png('plot2.png',width = 480, height = 480)
plot(df$Datetime,df$Global_active_power,type = 'l', xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
png("plot3.png", width=480, height=480)
plot(df$Datetime, df$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(df$Datetime, df$Sub_metering_2, type="l", col="red")
lines(df$Datetime, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
df <- read.csv('exdata_data_household_power_consumption/household_power_consumption.txt',sep=';',stringsAsFactors = FALSE)
# Change df$date to date type
df$Date <- as.Date(df$Date,format = '%d/%m/%Y')
# Filter by date
df <- df[df$Date >= '2007-02-01' & df$Date <= '2007-02-02',]
# Change variable types
for (i in 3:9){
df[,i] <- as.numeric(df[,i])
}
df$Datetime <- strptime(paste0(df$Date,df$Time, sep=" "), "%Y-%m-%d %H:%M:%S")
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(df$Datetime, df$Global_active_power, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(df$Datetime, df$Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(df$Datetime, df$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(df$Datetime, df$Sub_metering_2, type="l", col="red")
lines(df$Datetime, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(df$Datetime, df$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(df$Datetime, df$Global_active_power, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(df$Datetime, df$Voltage, type="l", xlab="datetime", ylab="Voltage")
plot(df$Datetime, df$Sub_metering_1, type="l", ylab="Energy Submetering", xlab="")
lines(df$Datetime, df$Sub_metering_2, type="l", col="red")
lines(df$Datetime, df$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="n")
plot(df$Datetime, df$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
